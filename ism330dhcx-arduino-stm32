// STWINKT1B
// STM32L4R9ZIJ6
// Using Generic stm32duino stm32l4 
// Board generic
// Sensor II3DHCX Basic Example
// Libraries at 
// https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/ism330dhcx_STdC
// https://github.com/STMicroelectronics/ism330dhcx-pid.git
//
#include "SPI.h"
#include "ism330dhcx_reg.h"
#include <LibPrintf.h>

#define ONLYACC
#define LED_BUILTIN PE1
#define LED2 PD0

// SerialPort is on SWD
HardwareSerial Serial2(PD_6,PD_5);
#define SerialPort  Serial2

// SPI Port on
#define SPI_MOSI PB5
#define SPI_MISO PB4
#define SPI_SCLK PB3
//Define Software Chip Select pin to use (default: SS)
#define ISM330DHCX_SPI_CS   PF13

SPIClass dev_interface(SPI_MOSI, SPI_MISO, SPI_SCLK);
uint32_t spi_speed = 10000000;


stmdev_ctx_t dev_ctx_ism330dhcx;

void setup() {
  // Led
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(LED2, OUTPUT);

  // Initialize serial for output
  printf_init(SerialPort);
  SerialPort.begin(230400);

  // Initialize SPI bus interface
  dev_interface.begin();
  dev_interface.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  delay(1000);

  // Initialize ism330dhcx sensor
  ism330dhcx_init();
  delay(100);
}

void loop() {
// Get data from ism330dhcx
ism330dhcx_get_accel_data(); 
delay(100);
}

// Write SPI data
static int32_t platform_write_ism330dhcx(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
  digitalWrite(ISM330DHCX_SPI_CS, LOW);
  /* Write Reg Address */
  dev_interface.transfer(reg);
  /* Write the data */
  for (uint16_t i = 0; i < len; i++) {
    dev_interface.transfer(bufp[i]);
  }
  digitalWrite(ISM330DHCX_SPI_CS, HIGH);
  return 0;
}

// Read SPI data
static int32_t platform_read_ism330dhcx(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
  digitalWrite(ISM330DHCX_SPI_CS, LOW);
  /* Write Reg Address */
  dev_interface.transfer(reg | 0x80);
  /* Read the data */
  for (uint16_t i = 0; i < len; i++) {
    *(bufp + i) = dev_interface.transfer(0x00);
    }
  digitalWrite(ISM330DHCX_SPI_CS, HIGH);
  return 0;
}

static void platform_delay(uint32_t ms)
{

}

static void platform_init(void)
{

}

// Initialize settings
void ism330dhcx_init(void)
{
  static uint8_t whoamI, rst;
  // Initialize CS/SS Pin
  pinMode(ISM330DHCX_SPI_CS, OUTPUT);
  digitalWrite(ISM330DHCX_SPI_CS, HIGH);

    /* Initialize mems driver interface */
  dev_ctx_ism330dhcx.write_reg = platform_write_ism330dhcx;
  dev_ctx_ism330dhcx.read_reg = platform_read_ism330dhcx;
  dev_ctx_ism330dhcx.handle = (void*) (NULL);
  /* Check device ID */
  ism330dhcx_device_id_get(&dev_ctx_ism330dhcx, &whoamI);


  if (whoamI != ISM330DHCX_ID) {
    while (1) {
      /* manage here device not found */
      // LED_BUILTIN Blinks
      digitalWrite(LED_BUILTIN, LOW);
      delay(100);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(200);
    }
  }

  printf("Device Found with Id %#x\n",whoamI);
  int8_t count = 3;
  while(count-- > 0) {
    digitalWrite(LED2, HIGH);
    delay(100);
    digitalWrite(LED2, LOW);
    delay(100);
  }

  /* Restore default configuration */
  ism330dhcx_reset_set(&dev_ctx_ism330dhcx, PROPERTY_ENABLE);

  do {
    ism330dhcx_reset_get(&dev_ctx_ism330dhcx, &rst);
  } while (rst);

  /* Start device configuration. */
  ism330dhcx_device_conf_set(&dev_ctx_ism330dhcx, PROPERTY_ENABLE);
  /* Enable Block Data Update */
  ism330dhcx_block_data_update_set(&dev_ctx_ism330dhcx, PROPERTY_ENABLE);
  /* Set Output Data Rate */
  ism330dhcx_xl_data_rate_set(&dev_ctx_ism330dhcx, ISM330DHCX_XL_ODR_12Hz5);
  ism330dhcx_gy_data_rate_set(&dev_ctx_ism330dhcx, ISM330DHCX_GY_ODR_12Hz5);
  /* Set full scale */
  ism330dhcx_xl_full_scale_set(&dev_ctx_ism330dhcx, ISM330DHCX_2g);
  ism330dhcx_gy_full_scale_set(&dev_ctx_ism330dhcx, ISM330DHCX_2000dps);
  /* Configure filtering chain(No aux interface)
   *
   * Accelerometer - LPF1 + LPF2 path
   */
  ism330dhcx_xl_hp_path_on_out_set(&dev_ctx_ism330dhcx, ISM330DHCX_LP_ODR_DIV_100);
  ism330dhcx_xl_filter_lp2_set(&dev_ctx_ism330dhcx, PROPERTY_ENABLE);
}

void ism330dhcx_get_accel_data(void) {
  //ism330dhcx_reg_t reg;
  static int16_t data_raw_acceleration[3];
  static int16_t data_raw_angular_rate[3];
  static int16_t data_raw_temperature;
  static float_t acceleration_mg[3];
  static float_t angular_rate_mdps[3];
  static float_t temperature_degC;
  static uint8_t tx_buffer[1000];

    uint8_t reg;
    /* Read output only if new xl value is available */
    ism330dhcx_xl_flag_data_ready_get(&dev_ctx_ism330dhcx, &reg);

    if (reg) {
      /* Read acceleration field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
      ism330dhcx_acceleration_raw_get(&dev_ctx_ism330dhcx, data_raw_acceleration);
      acceleration_mg[0] =
        ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[0]);
      acceleration_mg[1] =
        ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[1]);
      acceleration_mg[2] =
        ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[2]);
      snprintf((char *)tx_buffer, sizeof(tx_buffer),
              "%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
      printf("%s",tx_buffer);
    }

/*
    ism330dhcx_gy_flag_data_ready_get(&dev_ctx_ism330dhcx, &reg);
    if (reg) {
      // Read angular rate field data 
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
      ism330dhcx_angular_rate_raw_get(&dev_ctx_ism330dhcx, data_raw_angular_rate);
      angular_rate_mdps[0] =
        ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
      angular_rate_mdps[1] =
        ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
      angular_rate_mdps[2] =
        ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
      snprintf((char *)tx_buffer, sizeof(tx_buffer),
              "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
      printf("%s",tx_buffer);
    }


    ism330dhcx_temp_flag_data_ready_get(&dev_ctx_ism330dhcx, &reg);
    if (reg) {
      // Read temperature data 
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      ism330dhcx_temperature_raw_get(&dev_ctx_ism330dhcx, &data_raw_temperature);
      temperature_degC = ism330dhcx_from_lsb_to_celsius(
                           data_raw_temperature);
      snprintf((char *)tx_buffer, sizeof(tx_buffer),
              "Temperature [degC]:%6.2f\r\n", temperature_degC);
      printf("%s",tx_buffer);
    }
*/

}

